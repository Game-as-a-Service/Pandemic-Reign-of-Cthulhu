openapi: 3.0.3
info:
  title: Pandemic - Reign of Cthulhu
  version: 1.0.0
externalDocs:
  description: Discussion Docs
  url: https://miro.com/app/board/uXjVMO8BrcQ=/?share_link_id=645659989265
servers:
  - url: http://127.0.0.1:8081
  - url: https://petstore3.swagger.io/api/v3
tags:
  - name: init
  - name: investigator
  - name: action
security:
  - bearerAuth: []

paths:
  /games:
    post:
      summary: Create / initialize a new game
      operationId: createGame
      tags:
        - init
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateGameReq"
            examples:
              twoPlayers:
                summary: Example with two players
                value: 
                  players: 
                    - id: "123e4567-e89b-12d3-a456-426614174000"
                      nickname: "Sheep"
                    - id: "45714dc7-9657-4ca2-bf8a-dd026325423d"
                      nickname: "Goat"
              threePlayers:
                summary: Example with three players
                value: 
                  players: 
                    - id: "123e4567-e89b-12d3-a456-426614174000"
                      nickname: "Sheep"
                    - id: "d4719d5a-2483-43d7-a8b7-7c76e8b3fdae"
                      nickname: "Lamb"
                    - id: "bb9d5a48-3fa8-47e2-b3fc-2c963f66afa6"
                      nickname: "Llama"
              fourPlayers:
                summary: Example with four players
                value: 
                  players: 
                    - id: "123e4567-e89b-12d3-a456-426614174000"
                      nickname: "Sheep"
                    - id: "d4719d5a-2483-43d7-a8b7-7c76e8b3fdae"
                      nickname: "Lamb"
                    - id: "bb9d5a48-3fa8-47e2-b3fc-2c963f66afa6"
                      nickname: "Llama"
                    - id: "45714dc7-9657-4ca2-bf8a-dd026325423d"
                      nickname: "Goat"
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateGameRes"

  /games/{gameId}/investigator/order:
    get:
      summary: Get random users order in choosing the investigator
      operationId: findGameInvestigatorOrder
      tags:
        - init
        - investigator
      parameters:
        - in: path
          name: gameId
          schema:
            type: string
            format: uuid
          required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FindGameInvestigatorOrderRes"

  /games/{gameId}/investigator:
    get:
      summary: Get 2 investigators that are not yet chosen by users
      operationId: findGameInvestigator
      tags:
        - init
        - investigator
      parameters:
        - in: path
          name: gameId
          schema:
            type: string
            format: uuid
          required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FindGameInvestigatorRes"
    patch:
      summary: Update the selected investigator for a player
      description: Updates the selected investigator for a player in a game identified by gameId.
      tags:
        - init
      parameters:
        - name: gameId
          in: path
          description: ID of the game
          required: true
          schema:
            type: string
      requestBody:
        description: JSON object to specify the investigator
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                player_id:
                  type: string
                  example: '0b18-9d2140-a114'
                investigator:
                  $ref: "#/components/schemas/Investigator"
              required:
                - investigator
                - player_id
      responses:
        '200':
          description: Investigator selected successfully
        '400':
          description: Bad Request
          content:
            application/json:
              example:
                reason: investigator-already-chosen
              schema:
                type: object
                properties:
                  reason:
                    type: string
                    enum:
                      - investigator-already-chosen
                      - invalid-player
                      - invalid-investigator
                      - player-alreaady-started
                example: investigator-already-chosen
                
  /games/{gameId}/difficulty:
    patch:
      summary: Update the difficulty level for a game
      description: Updates the difficulty level for a game identified by gameId.
      tags:
        - init
      parameters:
        - name: gameId
          in: path
          description: ID of the game
          required: true
          schema:
            type: string
      requestBody:
        description: JSON object to specify the difficulty level
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                level:
                  type: string
                  enum:
                    - introductory
                    - standard
                    - expert
                  example: introductory
      responses:
        '200':
          description: Difficulty level updated successfully
          
  /games/{gameId}/start:
    patch:
      summary: Notify the backend that a player is ready to play
      description: Informs the backend that a player with the specified ID is ready to start the game.
      tags:
        - init
      parameters:
        - name: gameId
          in: path
          description: ID of the game
          required: true
          schema:
            type: string
      requestBody:
        description: JSON object that specifies player ID
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                player_id:
                  type: string
                  example: e2355667-e89b-12d3-a456-426614174000
      responses:
        '200':
          description: Player is ready
        '400':
          description: Bad Request
          content:
            application/json:
              example:
                reason: invalid-player
              schema:
                type: object
                properties:
                  reason:
                    type: string
                    enum:
                      - invalid-player
                      - invalid-investigator
                      - invalid-game-id
                example: invalid-player

components:
  schemas:
    CreateGameReq:
      type: object
      properties:
        players:
          type: array
          minItems: 2 
          maxItems: 4
          uniqueItems: true
          description: number of players has to be 2, 3 and 4 within a game.
          items:
            $ref: "#/components/schemas/Player"
    CreateGameRes:
      type: object
      properties:
        url:
          type: string
    FindGameInvestigatorOrderRes:
      type: array
      items:
        $ref: "#/components/schemas/PlayerOrder"
    FindGameInvestigatorRes:
      type: array
      items:
        type: object
        properties:
          investigator:
            $ref: "#/components/schemas/Investigator"

    Player:
      type: object
      required:
        - id 
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for each player.
        nickname:
          type: string
    PlayerOrder:
      type: object
      properties:
        user_id:
          type: string
          format: uuid
        order:
          type: integer

    Investigator:
      type: string
      enum:
        - detective
        - doctor
        - driver
        - hunter
        - magician
        - occultist
        - reporter

    Clue:
      type: string
      enum:
        - arkham
        - dunwich
        - kingsport
        - innsmouth

  securitySchemes:
    bearerAuth: # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT # optional, arbitrary value for documentation purposes
